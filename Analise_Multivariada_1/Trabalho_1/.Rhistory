ma <- function(data, grupo){
Grupos <- unique(pull(data, Presidio)); g <- length(Grupos); n <- nrow(data)
p <- ncol(data) - 1
xbarra_total <- colMeans(data[,-8])
xbarra <- matrix(nrow = length(Grupos), ncol = p)
n <- rep(1,length(Grupos))
# linhas guardam os grupos
for (i in 1:length(Grupos)){
xbarra[i,] <- colMeans(filter(data, data$Presidio == Grupos[i])[,-8])
n[i] <- nrow(filter(data, data$Presidio == Grupos[i])[,-8])
}
B <- 0
for (i in 1:g){
B <- B + n[i]*(xbarra[i,] - xbarra_total)%*%t(xbarra[i,] - xbarra_total)
}
W <- 0
for(i in 1:g){
W <- W + (n[i]- 1)*var(filter(data, data$Presidio == Grupos[i])[,-8])
}
return(det(W)/det(W+B))
}
ma <- function(data){
Grupos <- unique(pull(data, Presidio)); g <- length(Grupos); n <- nrow(data)
p <- ncol(data) - 1
xbarra_total <- colMeans(data[,-8])
xbarra <- matrix(nrow = length(Grupos), ncol = p)
n <- rep(1,length(Grupos))
# linhas guardam os grupos
for (i in 1:length(Grupos)){
xbarra[i,] <- colMeans(filter(data, data$Presidio == Grupos[i])[,-8])
n[i] <- nrow(filter(data, data$Presidio == Grupos[i])[,-8])
}
B <- 0
for (i in 1:g){
B <- B + n[i]*(xbarra[i,] - xbarra_total)%*%t(xbarra[i,] - xbarra_total)
}
W <- 0
for(i in 1:g){
W <- W + (n[i]- 1)*var(filter(data, data$Presidio == Grupos[i])[,-8])
}
return(det(W)/det(W+B))
}
ma(BD)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(ggplot2)
library(dplyr)
BD = read.delim("Lyncoln.csv", sep = " ")
BD = BD %>%
select(-Detento) %>%
arrange(Presidio) %>%
select(Presidio,everything())
descritivos = BD %>%
group_by(Presidio) %>%
summarize(
Med_Columbia = mean(Columbia),
Var_Columbia = var(Columbia),
Med_EFS = mean(EFS),
Var_EFS = var(EFS),
Med_HPC = mean(HPC),
Var_HPC = var(HPC),
Med_BAI = mean(BAI),
Var_BAI = var(BAI),
Med_BDI = mean(BDI),
Var_BDI = var(BDI),
Med_BSI = mean(BSI),
Var_BSI = var(BSI),
Med_EdAAI = mean(EdAAI),
Var_EdAAI = var(EdAAI)
)
descritivos = descritivos %>%
mutate_if(is.numeric,function(x) round(x,3))
#Boxplots
box_columbia =
ggplot(BD, aes(x = Presidio, y = Columbia, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de columbia por presídios") +
theme_bw()
box_EFS =
ggplot(BD, aes(x = Presidio, y = EFS, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de EFS por presídios") +
theme_bw()
box_HPC =
ggplot(BD, aes(x = Presidio, y = HPC, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de HPC por presídios") +
theme_bw()
box_BAI =
ggplot(BD, aes(x = Presidio, y = BAI, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de BAI por presídios") +
theme_bw()
box_BDI =
ggplot(BD, aes(x = Presidio, y = BDI, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de BDI por presídios") +
theme_bw()
box_BSI =
ggplot(BD, aes(x = Presidio, y = BSI, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de BSI por presídios") +
theme_bw()
box_EdAAI =
ggplot(BD, aes(x = Presidio, y = EdAAI, fill = Presidio)) +
geom_boxplot(show.legend = FALSE)+
coord_flip() +
ggtitle("Variação de EdAAI por presídios") +
theme_bw()
cor_bangu = ggcorrplot::ggcorrplot(cor(filter(BD,Presidio == "Bangu")[,-1]),
lab = TRUE,type = "lower") +
labs(title = "Correlação Bangu")
cor_central = ggcorrplot::ggcorrplot(cor(filter(BD,Presidio == "Central")[,-1]),
lab = TRUE,type = "lower") +
labs(title = "Correlação Central")
cor_mossoro = ggcorrplot::ggcorrplot(cor(filter(BD,Presidio == "Mossoro")[,-1]),
lab = TRUE,type = "lower") +
labs(title = "Correlação Mossoro")
cor_papuda = ggcorrplot::ggcorrplot(cor(filter(BD,Presidio == "Papuda")[,-1]),
lab = TRUE,type = "lower") +
labs(title = "Correlação Papuda")
cor_pedrinhas = ggcorrplot::ggcorrplot(cor(filter(BD,Presidio == "Pedrinhas")[,-1]),
lab = TRUE,type = "lower") +
labs(title = "Correlação Pedrinhas")
cor_pereirao = ggcorrplot::ggcorrplot(cor(filter(BD,Presidio == "Pereirao")[,-1]),
lab = TRUE,type = "lower") +
labs(title = "Correlação Pereirao")
freq = ggplot(BD,aes(x = Presidio,fill = Presidio))+
geom_bar(show.legend = FALSE)+
ylab("Frequência")+
ggtitle("Quantidade de detentos por presídios")+
theme_bw()
knitr::kable(descritivos)
freq
gridExtra::grid.arrange(box_columbia,box_EFS,ncol = 2)
gridExtra::grid.arrange(box_HPC,box_BAI, ncol = 2)
gridExtra::grid.arrange(box_BDI,box_BSI, ncol= 2)
box_EdAAI
gridExtra::grid.arrange(cor_bangu,cor_central,ncol = 2)
gridExtra::grid.arrange(cor_mossoro,cor_papuda,ncol = 2)
gridExtra::grid.arrange(cor_pedrinhas,cor_pereirao,ncol = 2)
presidios = BD %>%
select(Presidio) %>%
distinct() %>%
pull() %>%
as.character()
p_valor = c()
for(i in presidios){
p_valor = c(p_valor,mvShapiroTest::mvShapiro.Test(as.matrix(select(filter(BD,Presidio == i),-1)))$p.value)
}
normalidade = tibble(presidios,
p_valor) %>%
mutate(normal = if_else(p_valor > 0.05,"Sim","Não"))
knitr::kable(normalidade)
mvShapiroTest::mvShapiro.Test(as.matrix(BD[,-1]))$p.value
ind = function(data){
R = cor(data); p <- ncol(data)
n = nrow(data)
est = -((n-1)-(2*p+5)/6)*log(det(R))
return(est)
}
T2 = ind(BD[,-1])
RC = qchisq(0.05, 6*7/2)
T2
RC
pchisq(T2, 6*7/2, lower.tail = F)
testa_var = function(base){
p_valor = c()
primeiro = c()
segundo = c()
combinacoes = combn(as.vector(unique(base[,1])),2)
variancias = c()
for(i in 1:length(combinacoes[1,])){
x1 = combinacoes[,i][1]
x2 = combinacoes[,i][2]
bd_aux = BD %>% filter(Presidio==x1 | Presidio ==x2)#
bd_aux = arrange(bd_aux, Presidio)#
teste = MVTests::BoxM(as.vector(bd_aux[,-1]),as.vector(bd_aux[,1]))
p_valor = c(p_valor, teste$p.value)
primeiro = c(primeiro, x1)
segundo = c(segundo, x2)
if(teste$p.value > 0.05) variancias = c(variancias, "Iguais")
else variancias = c(variancias, "Diferentes")
}
resultado = tibble(Presidio1 = primeiro,
Presidio2 = segundo,
p_valor = p_valor,
"Variâncias" = variancias)
return(resultado)
}
teste_var_2x2 = testa_var(BD) %>%
mutate_if(is.numeric, function(x) ifelse(x<0.001,"<0.001", round(x,3)))
knitr::kable(teste_var_2x2)
BD_ban_cen = BD %>%
filter(Presidio %in% c("Bangu","Central")) %>%
arrange(Presidio)
qtd_ban_cen = BD_ban_cen %>%
group_by(Presidio) %>%
summarize(n())
MVTests::TwoSamplesHT2(BD_ban_cen[,-1],
c(rep(1,qtd_ban_cen[1,2]),rep(2,qtd_ban_cen[2,2])))
difmedia_VarIgual <- function(data, X1, X2, delta = 0){
X1 = filter(data, data$Presidio == X1)[, -1]
X2 = filter(data, data$Presidio == X2)[, -1]
n1 = nrow(X1)
n2 = nrow(X2)
n = n1 + n2
p = ncol(X1)
X1media = colMeans(X1)
S1 = var(X1)
X2media = colMeans(X2)
S2 = var(X2)
Sp = ((n1-1)*S1 + (n2-1)*S2)/(n -2)
Xd = X1media - X2media
Spast = (1/n1 + 1/n2)*Sp
T2 = t(Xd - delta)%*%solve(Spast)%*%(Xd - delta)
saida = list(T2 = T2)
return(saida)
}
difmedia_VarIgual(BD,"Bangu","Central")
BD_ban_mos = BD %>%
filter(Presidio %in% c("Bangu","Mossoro")) %>%
arrange(Presidio)
qtd_ban_mos = BD_ban_mos %>%
group_by(Presidio) %>%
summarize(n())
MVTests::TwoSamplesHT2(BD_ban_mos[,-1],
c(rep(1,qtd_ban_mos[1,2]),rep(2,qtd_ban_mos[2,2])),
Homogenity = FALSE)
difmedia_VarDif = function(data, X1, X2, delta = 0){
X1 = filter(data, data$Presidio == X1)[, -1]
X2 = filter(data, data$Presidio == X2)[, -1]
n1 = nrow(X1)
n2 = nrow(X2)
n = n1 + n2
p = ncol(X1)
X1media = colMeans(X1)
S1 = var(X1)
X2media = colMeans(X2)
S2 = var(X2)
Xd = X1media - X2media
Spast = S1/n1 + S2/n2
T2 = t(Xd - delta)%*%solve(Spast)%*%(Xd - delta)
saida = list(T2 = T2)
return(saida)
}
difmedia_VarDif(BD,"Bangu","Mossoro")
testa_med = function(base){
p_valor = c() #P_valor do teste de variancia
p_valor2 = c() #P_valor do teste de média
variancias = c()
est_medias = c()
medias = c()
primeiro = c()
segundo = c()
combinacoes = combn(as.vector(unique(base[,1])),2)
for(i in 1:length(combinacoes[1,])){
x1 = combinacoes[,i][1]
x2 = combinacoes[,i][2]
bd_aux = BD %>% filter(Presidio==x1 | Presidio ==x2)#
bd_aux = arrange(bd_aux, Presidio)#
teste = MVTests::BoxM(as.vector(bd_aux[,-1]),as.vector(bd_aux[,1]))
p_valor = c(p_valor, teste$p.value)
primeiro = c(primeiro, x1)
segundo = c(segundo, x2)
#Agora irei testar média
contagem = base %>%
filter(Presidio %in% c(x1,x2)) %>%
group_by(Presidio) %>%
summarize(n())
cont_x1 = contagem[1,2]
cont_x2 = contagem[2,2]
if(teste$p.value > 0.05) {
teste2 = MVTests::TwoSamplesHT2(bd_aux[,-1],c(rep(1,cont_x1),rep(2,cont_x2)),Homogenity = T)$p.value
est_media = MVTests::TwoSamplesHT2(bd_aux[,-1],c(rep(1,cont_x1),rep(2,cont_x2)),Homogenity = T)$HT2
p_valor2 = c(p_valor2,
teste2)
est_medias = c(est_medias, est_media)
variancias = c(variancias,"Igual")
}
else{
teste2 = MVTests::TwoSamplesHT2(bd_aux[,-1],c(rep(1,cont_x1),rep(2,cont_x2)),Homogenity = F)$p.value
est_media = MVTests::TwoSamplesHT2(bd_aux[,-1],c(rep(1,cont_x1),rep(2,cont_x2)),Homogenity = F)$HT2
p_valor2 = c(p_valor2,
teste2)
est_medias = c(est_medias, est_media)
variancias = c(variancias,"Diferente")
}
if(teste2 > 0.05) medias = c(medias, "Igual")
else medias = c(medias,"Diferente")
}
resultado = tibble(Presidio1 = primeiro,
Presidio2 = segundo,
p_valor_var = p_valor,
Variancias = variancias,
p_valor_medias = p_valor2,
Est_medias = est_medias,
Medias = medias)
return(resultado)
}
#Nessa função eu estou testando primeiramente a igualdade 2x2 das variâncias,
#Se forem iguais, o argumento da função do pacote mvtest será homogenity=True,
#Se forem diferentes, o argumento da função será homogenity = False
#O teste irá utilizar uma estatística de acordo com o resultado da igualdade das variâncias
testa_med_2x2 = testa_med(BD)
testa_med_2x2 = testa_med_2x2 %>%
mutate_if(is.numeric, function(x) ifelse(x<0.001,"<0.001", round(x,3)))
knitr::kable(testa_med_2x2)
BD_mos = BD %>%
filter(Presidio=="Mossoro")
BD_geral = BD %>%
filter(Presidio!="Mossoro") %>%
mutate(Presidio = "Geral")
MVTests::BoxM(as.matrix(rbind(BD_mos,BD_geral)[,-1]),
as.matrix(rbind(BD_mos,BD_geral)[,1]))
MVTests::TwoSamplesHT2(as.matrix(rbind(BD_mos,BD_geral)[,-1]),c(rep(1,length(BD_mos[,1])),rep(2,length(BD_geral[,1]))),Homogenity = F)
BD_papuda = BD %>%
filter(Presidio == "Papuda")
BD_papuda = BD_papuda[1:length(BD_mos[,1]),]
par <- MVTests::Mpaired(T1 = BD_papuda[,-1], T2 = BD_mos[,-1])
par
dif <- function(data, X1, X2, alfa = 0.5, delta = 0){
D1 = filter(data, data$Presidio == X1)[, -1]
D2 = filter(data, data$Presidio == X2)[, -1]
D = D1 - D2;
p = ncol(D)
Dmedia = colMeans(D)
Sd = var(D)
n = nrow(D)
T2 = n%*%t(Dmedia - delta)%*%solve(Sd)%*%(Dmedia - delta)
saida = list(T2 = T2, Sd = Sd )
return(saida)
}
dif(rbind(BD_papuda,BD_mos),"Mossoro","Papuda")
BD_mpp = BD %>%
filter(Presidio %in% c("Mossoro","Papuda","Pereirao"))
MVTests::BoxM(as.matrix(BD_mpp[,-1]),
as.matrix(BD_mpp[,1]))
MVTests::Manova(as.matrix(BD_mpp[,-1]),
as.matrix(BD_mpp[,1]))
ma <- function(data){
Grupos <- unique(pull(data, Presidio)); g <- length(Grupos); n <- nrow(data)
p <- ncol(data) - 1
xbarra_total <- colMeans(data[,-8])
xbarra <- matrix(nrow = length(Grupos), ncol = p)
n <- rep(1,length(Grupos))
# linhas guardam os grupos
for (i in 1:length(Grupos)){
xbarra[i,] <- colMeans(filter(data, data$Presidio == Grupos[i])[,-8])
n[i] <- nrow(filter(data, data$Presidio == Grupos[i])[,-8])
}
B <- 0
for (i in 1:g){
B <- B + n[i]*(xbarra[i,] - xbarra_total)%*%t(xbarra[i,] - xbarra_total)
}
W <- 0
for(i in 1:g){
W <- W + (n[i]- 1)*var(filter(data, data$Presidio == Grupos[i])[,-8])
}
return(det(W)/det(W+B))
}
ma(BD)
ma <- function(data){
Grupos <- unique(pull(data, Presidio)); g <- length(Grupos); n <- nrow(data)
p <- ncol(data) - 1
xbarra_total <- colMeans(data[,-1])
xbarra <- matrix(nrow = length(Grupos), ncol = p)
n <- rep(1,length(Grupos))
# linhas guardam os grupos
for (i in 1:length(Grupos)){
xbarra[i,] <- colMeans(filter(data, data$Presidio == Grupos[i])[,-1])
n[i] <- nrow(filter(data, data$Presidio == Grupos[i])[,-1])
}
B <- 0
for (i in 1:g){
B <- B + n[i]*(xbarra[i,] - xbarra_total)%*%t(xbarra[i,] - xbarra_total)
}
W <- 0
for(i in 1:g){
W <- W + (n[i]- 1)*var(filter(data, data$Presidio == Grupos[i])[,-1])
}
return(det(W)/det(W+B))
}
ma(BD)
ma <- function(data){
Grupos <- unique(pull(data, Presidio)); g <- length(Grupos); n <- nrow(data)
p <- ncol(data) - 1
xbarra_total <- colMeans(data[,-1])
xbarra <- matrix(nrow = length(Grupos), ncol = p)
n <- rep(1,length(Grupos))
# linhas guardam os grupos
for (i in 1:length(Grupos)){
xbarra[i,] <- colMeans(filter(data, data$Presidio == Grupos[i])[,-1])
n[i] <- nrow(filter(data, data$Presidio == Grupos[i])[,-1])
}
B <- 0
for (i in 1:g){
B <- B + n[i]*(xbarra[i,] - xbarra_total)%*%t(xbarra[i,] - xbarra_total)
}
W <- 0
for(i in 1:g){
W <- W + (n[i]- 1)*var(filter(data, data$Presidio == Grupos[i])[,-1])
}
return(det(W)/det(W+B))
}
ma(BD_mpp)
devtools::install_github("juba/rmdformats")
devtools::install_github("juba/rmdformats")
