load("E:/Download/DesafioVencedor.RData")
View(modelo)
View(desafio)
View(dados_pp)
View(desafio)
require(dplyr); require(reshape2); require(tidyverse)
require(sjPlot)
BD_n = readxl::read_excel("AMOSTRA Satisfacao.xlsx")
N = readxl::read_excel("N.xlsx")
N = melt(N,id.vars = "Ano",value.name = "Nh",variable.name = "Turno")
BD_n = BD_n %>%
mutate(Satisfeito = if_else(Satisfeito == "S", 1, 0))
BD_2_n = BD_n %>%
group_by(Ano,Turno) %>%
summarise("nh" = n(),
somah = sum(Satisfeito))
BD = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
BD = BD %>%
mutate(ph = somah/nh,
Wh = Nh/sum(BD$Nh),
wp = Wh*ph)
attach(BD)
wp_hat = sum(BD$wp); wp_hat
var_wp_hat = (1/sum(Nh)^2) * sum(ifelse(is.nan(Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)),
0,
Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)))
var_wp_hat
source('G:/GitHub/UFF/estatistica_aplicada_2/Consultoria_4/N.xlsx', encoding = 'UTF-8')
setwd("G:/GitHub/UFF/estatistica_aplicada_2/Consultoria_4")
require(dplyr); require(reshape2); require(tidyverse)
require(sjPlot)
BD_n = readxl::read_excel("AMOSTRA Satisfacao.xlsx")
N = readxl::read_excel("N.xlsx")
N = melt(N,id.vars = "Ano",value.name = "Nh",variable.name = "Turno")
BD_n = BD_n %>%
mutate(Satisfeito = if_else(Satisfeito == "S", 1, 0))
BD_2_n = BD_n %>%
group_by(Ano,Turno) %>%
summarise("nh" = n(),
somah = sum(Satisfeito))
BD = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
BD = BD %>%
mutate(ph = somah/nh,
Wh = Nh/sum(BD$Nh),
wp = Wh*ph)
attach(BD)
wp_hat = sum(BD$wp); wp_hat
var_wp_hat = (1/sum(Nh)^2) * sum(ifelse(is.nan(Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)),
0,
Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)))
var_wp_hat
li = wp_hat - qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
ls = wp_hat + qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
paste0("(",round(li,3),";",round(ls,3),")")
library(dplyr);library(reshape2);library(tidyverse)
BD_n = readxl::read_excel("AMOSTRA Satisfacao.xlsx")
N = readxl::read_excel("N.xlsx")
N = melt(N,id.vars = "Ano",value.name = "Nh",variable.name = "Turno")
BD_n = BD_n %>%
mutate(Satisfeito = if_else(Satisfeito == "S", 1, 0))
BD_2_n = BD_n %>%
group_by(Ano,Turno) %>%
summarise("nh" = n(),
somah = sum(Satisfeito))
BD = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
BD = BD %>%
mutate(ph = somah/nh,
Wh = Nh/sum(BD$Nh),
arroz = Wh*ph)
attach(BD)
arrozal_chapeu = sum(BD$arroz);arrozal_chapeu
inflacao_arrozal_chapeu = (1/sum(Nh)^2) * sum(ifelse(is.nan(Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)),
0,
Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)));inflacao_arrozal_chapeu
li = arrozal_chapeu - qnorm(0.975,lower.tail = T)*sqrt(inflacao_arrozal_chapeu)
ls = arrozal_chapeu + qnorm(0.975,lower.tail = T)*sqrt(inflacao_arrozal_chapeu)
paste0("(",round(li,3),";",round(ls,3),")")
# Graficos
BD_unite <- BD_n %>% unite('estrato', Ano:Turno)
BD_unite_noturno <- BD_n %>% filter(Turno == 'Noturno') %>% unite('estrato', Ano:Turno)
BD_unite_diurno <- BD_n %>% filter(Turno == 'Diurno') %>% unite('estrato', Ano:Turno)
plot_frq(BD_unite, estrato, title = "Teste") + xlab('MUDAR')
plot_frq(BD_unite_diurno, estrato, show.prc = FALSE) + xlab('MUDAR')
plot_frq(BD_unite_noturno, estrato, show.prc = FALSE, title = "Teste") + xlab('MUDAR')
plot_grpfrq(BD_unite_diurno$estrato, BD_unite_diurno$Satisfeito,
show.grpcnt = T, show.prc = FALSE) + xlab('MUDAR')
plot_grpfrq(BD_unite_noturno$estrato, BD_unite_noturno$Satisfeito,
show.grpcnt = T, show.prc = FALSE) + xlab('MUDAR')
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
plot(log,0,4)
grid()
segments(x0=1,y0=4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
pol_ln1=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
while (n>0){
aprox=aprox+ (((-1)^n)*((x-1)^(n+1))/(n+1))
n=n-1
}
return(aprox)
}
pol_ln1(10)
pol_ln1(4,4)
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
pol_ln1(4,4)
pol_ln(4,4)
pol_ln1=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
while (n>0){
print(n)
aprox=aprox+ (((-1)^n)*((x-1)^(n+1))/(n+1))
n=n-1
}
return(aprox)
}
pol_ln1(4,4)
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
print(i)
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
pol_ln(4,4)
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
# if (x<=0){
#   stop('erro')
# }
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
curve(pol_ln(x,n=5),add=T,col="green")
log(-1)
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
plot(log,0,4)
grid()
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0,4)
grid()
curve(pol_ln(x,n=2),add=T,col="violet")
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
curve(pol_ln(x,n=5),add=T,col="green")
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
curve(pol_ln(x,n=5),add=T,col="green")
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
#if (x<=0){
#stop('erro')
# }
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
curve(pol_ln(x,n=5),add=T,col="green")
x
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
curve(pol_ln(x,n=5),add=T,col="green")
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
print(x)
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
print(x)
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x <= 0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
#6)--------------------------------------------------------------------------------------------------------------------------------------------
pol_ln=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x <= 0){
stop('erro')
}
aprox=0
i=0
while (i<=n){
aprox=aprox+ (((-1)^i)*((x-1)^(i+1))/(i+1))
i=i+1
}
return(aprox)
}
plot(log,0.1,4)
grid()
segments(x0=1,y0=-4,x1=1,y1=10,lty=2)
curve(pol_ln(x,n=2),add=T,col="violet")
curve(pol_ln(x,n=3),add=T,col="red")
curve(pol_ln(x,n=4),add=T,col="blue")
curve(pol_ln(x,n=5),add=T,col="green")
pol_ln1=function(x,n){
if (n<=0){
stop('o valor do segundo argumento precisar ser um numero natural.')
}
if (x<=0){
stop('erro')
}
aprox=0
while (n>0){
aprox=aprox+ (((-1)^n)*((x-1)^(n+1))/(n+1))
n=n-1
}
return(aprox)
}
