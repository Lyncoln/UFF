wp_hat = sum(BD$wp); wp_hat
var_wp_hat = (1/sum(Nh)^2) * sum(ifelse(is.nan(Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)),
0,
Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)))
var_wp_hat
li = wp_hat - qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
ls = wp_hat + qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
paste0("(",round(li,3),";",round(ls,3),")")
detach(BD)
# Graficos
BD_unite <- BD_n %>% unite('estrato', Ano:Turno)
BD_unite_noturno <- BD_n %>% filter(Turno == 'Noturno') %>% unite('estrato', Ano:Turno)
BD_unite_diurno <- BD_n %>% filter(Turno == 'Diurno') %>% unite('estrato', Ano:Turno)
plot_frq(BD_unite, estrato, title = "Teste") + xlab('MUDAR')
plot_frq(BD_unite_diurno, estrato, show.prc = FALSE) + xlab('MUDAR')
plot_frq(BD_unite_noturno, estrato, show.prc = FALSE, title = "Teste") + xlab('MUDAR')
plot_grpfrq(BD_unite_diurno$estrato, BD_unite_diurno$Satisfeito,
show.grpcnt = T, show.prc = FALSE) + xlab('MUDAR')
plot_grpfrq(BD_unite_noturno$estrato, BD_unite_noturno$Satisfeito,
show.grpcnt = T, show.prc = FALSE) + xlab('MUDAR')
View(BD_2_n)
View(N)
BD_2_n;N
BD_t = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
View(BD_t)
sum(BD_t$Nh)
attach(BD_t)
Nh/nh
Nh/nh * somah
total_chapeu = sum(Nh/nh * somah); total_chapeu
sum(BD_2_n$somah)
BD
BD_n
sum(BD_n$Satisfeito)
somah
sum(somah)
total_chapeu = sum(Nh/nh * somah); total_chapeu
require(dplyr); require(reshape2); require(tidyverse)
require(sjPlot)
BD_n = readxl::read_excel("AMOSTRA Satisfacao.xlsx")
N = readxl::read_excel("N.xlsx")
N = melt(N,id.vars = "Ano",value.name = "Nh",variable.name = "Turno")
BD_n = BD_n %>%
mutate(Satisfeito = if_else(Satisfeito == "S", 1, 0))
BD_2_n = BD_n %>%
group_by(Ano,Turno) %>%
summarise("nh" = n(),
somah = sum(Satisfeito))
BD = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
BD = BD %>%
mutate(ph = somah/nh,
Wh = Nh/sum(BD$Nh),
wp = Wh*ph)
attach(BD)
wp_hat = sum(BD$wp); wp_hat
var_wp_hat = (1/sum(Nh)^2) * sum(ifelse(is.nan(Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)),
0,
Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)))
var_wp_hat
li = wp_hat - qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
ls = wp_hat + qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
paste0("(",round(li,3),";",round(ls,3),")")
detach(BD)
# Graficos
BD_unite <- BD_n
BD_unite_noturno <- BD_n %>% filter(Turno == 'Noturno')
BD_unite_diurno <- BD_n %>% filter(Turno == 'Diurno')
plot_frq(BD_unite, Ano, title = "Teste", hjust = 0.2) + xlab('MUDAR')#+
#facet_wrap(facets = Turno)#+ coord_flip()
plot_frq(BD_unite_diurno, Ano, show.prc = FALSE) + xlab('Turno: Diurno')# + coord_flip()
plot_frq(BD_unite_noturno, Ano, show.prc = FALSE) + xlab('Turno: Noturno')#+ coord_flip()
plot_grpfrq(BD_unite_diurno$Ano, BD_unite_diurno$Satisfeito,
show.grpcnt = F, show.prc = FALSE) + xlab('Turno: Diurno') +
scale_fill_manual(labels = c("N達o", "Sim"),
values = c("lightblue", "steelblue"))
plot_grpfrq(BD_unite_noturno$Ano, BD_unite_noturno$Satisfeito,
show.grpcnt = F, show.prc = FALSE) + xlab('Turno: Noturno')+
scale_fill_manual(labels = c("N達o", "Sim"),
values = c("lightblue", "steelblue"))
# Total -------------------------------------------------------------------
BD_t = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
attach(BD_t)
total_chapeu = sum(Nh/nh * somah); total_chapeu
View(BD_t)
View(BD_2_n)
View(BD_n)
View(BD)
require(dplyr); require(reshape2); require(tidyverse)
require(sjPlot)
BD_n = readxl::read_excel("AMOSTRA Satisfacao.xlsx")
N = readxl::read_excel("N.xlsx")
N = melt(N,id.vars = "Ano",value.name = "Nh",variable.name = "Turno")
BD_n = BD_n %>%
mutate(Satisfeito = if_else(Satisfeito == "S", 1, 0))
BD_2_n = BD_n %>%
group_by(Ano,Turno) %>%
summarise("nh" = n(),
somah = sum(Satisfeito))
BD = BD_2_n %>%
left_join(N,by = c("Turno","Ano"))
BD = BD %>%
mutate(ph = somah/nh,
Wh = Nh/sum(BD$Nh),
wp = Wh*ph)
attach(BD)
wp_hat = sum(BD$wp); wp_hat
var_wp_hat = (1/sum(Nh)^2) * sum(ifelse(is.nan(Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)),
0,
Nh*(Nh-nh)*(ph*(1-ph))/(nh-1)))
var_wp_hat
li = wp_hat - qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
ls = wp_hat + qnorm(0.975,lower.tail = T)*sqrt(var_wp_hat)
paste0("(",round(li,3),";",round(ls,3),")")
detach(BD)
# Graficos
BD_unite <- BD_n
BD_unite_noturno <- BD_n %>% filter(Turno == 'Noturno')
BD_unite_diurno <- BD_n %>% filter(Turno == 'Diurno')
plot_frq(BD_unite, Ano, title = "Teste", hjust = 0.2) + xlab('MUDAR')#+
#facet_wrap(facets = Turno)#+ coord_flip()
plot_frq(BD_unite_diurno, Ano, show.prc = FALSE) + xlab('Turno: Diurno')# + coord_flip()
plot_frq(BD_unite_noturno, Ano, show.prc = FALSE) + xlab('Turno: Noturno')#+ coord_flip()
plot_grpfrq(BD_unite_diurno$Ano, BD_unite_diurno$Satisfeito,
show.grpcnt = F, show.prc = FALSE) + xlab('Turno: Diurno') +
scale_fill_manual(labels = c("N達o", "Sim"),
values = c("lightblue", "steelblue"))
plot_grpfrq(BD_unite_noturno$Ano, BD_unite_noturno$Satisfeito,
show.grpcnt = F, show.prc = FALSE) + xlab('Turno: Noturno')+
scale_fill_manual(labels = c("N達o", "Sim"),
values = c("lightblue", "steelblue"))
# Total -------------------------------------------------------------------
BD_t = BD %>%
left_join(N,by = c("Turno","Ano"))
BD
BD_t = BD %>%
left_join(N,by = c("Turno","Ano"))
View(N)
BD_t = BD %>%
selec(-Nh) %>%
left_join(N,by = c("Turno","Ano"))
BD_t = BD %>%
select(-Nh) %>%
left_join(N,by = c("Turno","Ano"))
View(BD)
View(BD_n)
600*0.769
total_chapeu = sum(Nh/nh * somah); total_chapeu
wp_hat
600*wp_hat
li
li*600
ls*600
BD_3 = BD %>%
left_join(N,by = c("Ano","Turno"))
View(BD_3)
BD_3 = BD_n %>%
left_join(N,by = c("Ano","Turno"))
BD
BD_aux = BD %>%
select(Ano,Turno,ph)
BD_3 = BD_n %>%
left_join(N,by = c("Ano","Turno"))
BD_aux = BD %>%
select(Ano,Turno,ph)
BD_3 = BD_3 %>%
left_join(BD_aux,by = c("Ano","Turno"))
x =
BD_3 %>%
group_by(Ano,Turno) %>%
summarise(sh = (Satisfeito - ph)^2 / n() )
View(x)
BD_3 = BD_n %>%
left_join(N,by = c("Ano","Turno"))
BD_aux = BD %>%
select(Ano,Turno,ph,nh)
BD_3 = BD_3 %>%
left_join(BD_aux,by = c("Ano","Turno"))
View(BD_3)
sh = BD_3 %>%
group_by(Ano,Turno) %>%
summarise(n())
View(sh)
sh = BD_3 %>%
group_by(Ano,Turno) %>%
summarise(sum((Satisfeito - ph)^2)/(nh-1))
summarise(sum((Satisfeito))
sh = BD_3 %>%
group_by(Ano,Turno) %>%
summarise(sum((Satisfeito)))
sh = BD_3 %>%
group_by(Ano,Turno) %>%
summarise(sum((Satisfeito-ph)))
comb(unique(BD_3$Ano),unique(BD_3$Turno))
combn(unique(BD_3$Ano),unique(BD_3$Turno))
unique(BD_3$Ano)
unique(BD_3$Turno)
combine(unique(BD_3$Ano),unique(BD_3$Turno))
arrange(unique(BD_3$Ano),unique(BD_3$Turno))
install.packages("arrangements")
library(arrangements)
combinations(unique(BD_3$Ano),unique(BD_3$Turno))
unique(BD_3$Ano)
unique(BD_3$Turno)
combinations(x = c("a", "b", "c"), freq = c(2, 1, 1), k = 2)
combinations(unique(BD_3$Ano),unique(BD_3$Turno))
expand.grid(unique(BD_3$Ano),unique(BD_3$Turno))
expand.grid(unique(BD_3$Ano),unique(BD_3$Turno))
elementos = expand.grid(unique(BD_3$Ano),unique(BD_3$Turno))
for(i in elementos){
print(i)
}
for(i in length(elementos)){
print(i)
}
for(i in length(elementos)){
print(i)
}
elementos = expand.grid(unique(BD_3$Ano),unique(BD_3$Turno))
elementos
length(elementos)
nrow(elementos)
elementos
elementos[,1]
elementos[1,1]
elementos[1,]
elementos[2,]
elementos[2,][1]
elementos[2,][2]
BD_3
sh = c()
for(i in nrow(elementos)){
comb = elementos[i,]
aux = filter(Ano == comb[1],
Turno = com[2])
head(aux)
}
comb = elementos[i,]
sh = c()
for(i in nrow(elementos)){
comb = elementos[i,]
print(comb)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
sh = c()
for(i in nrow(elementos)){
comb = elementos[i,]
print(comb)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in nrow(elementos)){
print(i)
comb = elementos[i,]
print(comb)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
print(i)
comb = elementos[i,]
print(comb)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
print(comb)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
print(comb[1])
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
print(unlist(comb[1]))
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
print(unlist(comb[[1]]))
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
print(comb[[1]])
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = comb[[2]]
print(ano,turno)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = comb[[2]]
print(turno)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = comb[[2]]
print(turno)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = comb[[2]]
print(unlist(turno))
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = comb[[2]]
print(as.character(turno))
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
print(turno)
# aux = filter(Ano == comb[1],
#              Turno = com[2])
# head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano == comb[1],
Turno = com[2])
head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano = comb[1],
Turno = com[2])
head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano = comb[1],
Turno = comb[2])
head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano = comb,
Turno = ano)
head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano == comb,
Turno == ano)
head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano == ano,
Turno == turno)
head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = filter(Ano == ano,
Turno == turno)
head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
print(ano)
aux = filter(Ano == ano,
Turno == turno)
head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
print(ano)
print(turno)
aux = filter(Ano == ano,
Turno == turno)
head(aux)
}
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
print(ano)
print(turno)
aux = BD_3 %>%
filter(Ano == ano,
Turno == turno)
head(aux)
}
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = BD_3 %>%
filter(Ano == ano,
Turno == turno)
head(aux)
}
aux
aux$ph[1]
unique(aux$ph)
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = BD_3 %>%
filter(Ano == ano,
Turno == turno)
mediah = aux$ph[1]
nh = aux$nh[1]
sh = c(sh, sum((aux$Satisfeito - mediah)^2)/(nh-1))
}
sh
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = BD_3 %>%
filter(Ano == ano,
Turno == turno)
mediah = aux$ph[1]
nh = aux$nh[1]
sh = c(sh, sum((aux$Satisfeito - mediah)^2)/(nh-1))
}
sh = if_else(is.nan(sh),0,sh)
sh
elementos[9,]
sh = if_else(is.nan(sh)|is.na(sh),0,sh)
sh = c()
for(i in 1:nrow(elementos)){
comb = elementos[i,]
ano = comb[[1]]
turno = as.character(comb[[2]])
aux = BD_3 %>%
filter(Ano == ano,
Turno == turno)
mediah = aux$ph[1]
nh = aux$nh[1]
sh = c(sh, sum((aux$Satisfeito - mediah)^2)/(nh-1))
}
sh = if_else(is.nan(sh)|is.na(sh),0,sh)
sh
