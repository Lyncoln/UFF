if(n%%2 == 0){
k = n/2 + 1
j = k+1
}else{
k = (n-1)/2
j = k + 2
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2))
quartis_1(c(1,1,2,2))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2
j = k + 2
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2))
quantile
View(quantile)
UseMethod("quantile")
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2
j = k + 2
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2
j = k + 2
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2,2))
quantile(c(1,1,2,2,2))
quantile(1:10)
quartis_1(1:11)
quartis_1(1:10)
quartis_2(1:10)
quartis_1(1,2,2,3)
quartis_1(c(1,2,2,3))
quartis_1 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2
j = k + 2
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_1(1:10)
quartis_1(1:10)
quartis_1(1,2,2,3)
quartis_1(c(1,2,2,3))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2,))
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
print(v_1)
print(v)
print(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(c(1,1,2,2,3))
quartis_1 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2
j = k + 2
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
return(c(q_1,q_2,q_3))
}
quartis_1(1:10)
quartis_2(1:10)
quartis_2 = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
v_o = sort(v)
if(n%%2 == 0){
k = n/2
j = k+1
}else{
k = (n-1)/2 +1
j = k
}
v_1 = v_o[1:k]
v_2 = v_o[j:n]
q_1 = mediana(v_1)
q_2 = mediana(v)
q_3 = mediana(v_2)
return(c(q_1,q_2,q_3))
}
quartis_2(1:11)
quartis_1(1:11)
quantile(1:11)
quantile(1:10)
dist_quart = function(v){
quart = quartis_1(v)
return(quart[3] - quart[1])
}
dist_quart(1:11)
quartis_1(1:11)
variancia_amostra = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
m = media(v)
soma = 0
for(i in 1:n){
soma = soma + (v[i] - m)^2
}
s2 = soma/(n-1)
return(s2)
}
variancia_amostra(1:20)
sd(1:20)
sd(1:20)^2
variancia_amostra(1:20)
sd(1:20)^2
desvio_medio = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
m = media(v)
soma = 0
for(i in 1:n){
soma = soma + abs(v[i] - m)
}
dm = soma/n
return(dm)
}
desvio_medio(1:20)
desvio_medio = function(v){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
n = length(v)
m = media(v)
soma = 0
for(i in 1:n){
soma = soma + abs(v[i] - m)
}
dm = soma/n
return(dm)
}
desvio_medio(1:20)
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
if(n != k) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
}
cov = soma(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
if(n != w) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
}
cov = soma(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
soma = 0
if(n != w) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
}
cov = soma(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
if(n != w) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
}
cov = soma/(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
1:10
11:20
cov(1:10,11:20)
cov_amostral(1:10,11:20)
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
if(n != w) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
}
cov = soma/(n-1)
return(cov)
}
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
if(n != w) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
print(soma)
}
cov = soma/(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
cov_amostral = function(v,k){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
w = length(w)
if(n != w) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(k)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(k[i]-m_w)
print(soma)
}
cov = soma/(n-1)
return(cov)
}
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
k = length(w)
if(n != k) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
print(soma)
}
cov = soma/(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
cov_amostral = function(v,w){
if(!is.numeric(v)) stop("Vetor v precisa ser numérico!")
if(!is.numeric(w)) stop("Vetor w precisa ser numérico!")
n = length(v)
k = length(w)
if(n != k) stop("Vetores com dimensões diferentes")
m_v = media(v)
m_w = media(w)
soma = 0
for(i in 1:n){
soma = soma + (v[i]-m_v)*(w[i]-m_w)
}
cov = soma/(n-1)
return(cov)
}
cov_amostral(1:10,11:20)
cov(1:10,11:20)
amplitude(A1)
A1 =  c(6,9,7,3,9,2,2,6), A2 = c(4,4,6,1,1,2,7,4) e A3 = c(1,9,5,7,2,4,2,1,9,4)
amplitude(A1)
A1 =  c(6,9,7,3,9,2,2,6); A2 = c(4,4,6,1,1,2,7,4) ; A3 = c(1,9,5,7,2,4,2,1,9,4)
A1 =  c(6,9,7,3,9,2,2,6); A2 = c(4,4,6,1,1,2,7,4) ; A3 = c(1,9,5,7,2,4,2,1,9,4)
## a)
```{r}
amplitude(A1)
```
A1 =  c(6,9,7,3,9,2,2,6); A2 = c(4,4,6,1,1,2,7,4) ; A3 = c(1,9,5,7,2,4,2,1,9,4)
A1
amplitude(A1)
media(A3)
variancia_amostra(A2)
A4 = c(A1,A2)
media(A4)
mediana(A4)
desvio_medio(A4)
quartis_1(A3)
dist_quart(A3)
cov_amostral(A1,A2)
cov_amostral(A1,A3)
