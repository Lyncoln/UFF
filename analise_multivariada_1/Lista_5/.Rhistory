R0=cor(dados)
R0
#Sexo Masculino
# MÉdia amostral
dadosM=dados[dados$genero==1,1:7]
Xbarra1 <- matrix(apply(dadosM,2,mean),ncol=1)
Xbarra1
n1 <- nrow(dadosM)
n1
p1 <- ncol(dadosM)
p1
# Matriz de variancias e covariancias amostrais
S1 <- var(dadosM)
S1
# Matriz de correlacoes amostrais
R1=cor(dadosM)
R1
#vetores de mÃ©dias
cbind(Xbarra0,Xbarra1)
# ----------------- Graficos de dispersao multivariados -----------------
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(dadosF, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
pairs(dadosM, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
par(mfrow=c(1,2))
d<-rep(0,n0)
for (i in 1: n0)
d[i] <- t(t(dadosF[i,]) - Xbarra0) %*% solve(S0) %*% (t(dadosF[i,]) - Xbarra0)
qqplot(d, qchisq(ppoints(n0), p0), pch=16, main="Grafico de quantis", xlab="quantis amostrais", ylab="quantis teoricos" )  # ExercÃcio: ?ppoints e proponha uma alternativa
abline(0,1)
d<-rep(0,n1)
for (i in 1: n1)
d[i] <- t(t(dadosM[i,]) - Xbarra1) %*% solve(S1) %*% (t(dadosM[i,]) - Xbarra1)
qqplot(d, qchisq(ppoints(n1), p1), pch=16, main="Grafico de quantis", xlab="quantis amostrais", ylab="quantis teoricos" )  # ExercÃcio: ?ppoints e proponha uma alternativa
abline(0,1)
par(mfrow=c(1,1))
library(mvShapiroTest)
mvShapiro.Test(as.matrix(dadosF))
mvShapiro.Test(as.matrix(dadosM))
p=p0
Sp=((n0-1)*S0+(n1-1)*S1)/(n0+n1-2)
T2 = (1/n0+1/n1)^{-1} * t(Xbarra0-Xbarra1) %*% solve(Sp) %*% (Xbarra0-Xbarra1)
Fcal=(n0+n1-p-1)/((n0+n1-2)*p)*T2
Fcal
install.packages("Hotelling")
require(Hotelling)
analise=hotelling.stat(dadosF,dadosM)
analise
teste=hotelling.test(dadosF,dadosM)
teste
xcal=(n0+n1)/2*t(Xbarra0-Xbarra1)%*%solve(Sp)%*%(Xbarra0-Xbarra1)
xcal
ICsim=function(dados1,dados2,alfa,i){
n1 = nrow(dados1)
S1 = cov(dados1)
n2 = nrow(dados2)
S2 = cov(dados2)
p = ncol(dados1)
Xbarra1 <- matrix(apply(dados1,2,mean),ncol=1)
Xbarra2 <- matrix(apply(dados2,2,mean),ncol=1)
Sp=((n1-1)*S1+(n2-1)*S2)/(n1+n2-2)
t.tab=qt(alfa/(2*p),df=(n1+n2-2),lower.tail=FALSE)
ampl=t.tab*sqrt((1/n1+1/n2)*Sp[i,i])
linf=(Xbarra1[i]-Xbarra2[i])-ampl
lsup=(Xbarra1[i]-Xbarra2[i])+ampl
med1=paste("m",i,1,sep="")
med2=paste("m",i,2,sep="")
cat("IC(",med1,"-",med2,")","=",linf,";",lsup)
}
ICsim(dadosF,dadosM,0.05,1)
ICsim(dadosF,dadosM,0.05,2)
ICsim(dadosF,dadosM,0.05,3)
ICsim(dadosF,dadosM,0.05,4)
ICsim(dadosF,dadosM,0.05,5)
ICsim(dadosF,dadosM,0.05,6)
ICsim(dadosF,dadosM,0.05,7)
#----------------- MANOVA
dados=iris
dados1=dados[dados$Species=="setosa",1:4]
Xbarra1 <- matrix(apply(dados1,2,mean),ncol=1)
Xbarra1
dados2=dados[dados$Species=="versicolor",1:4]
Xbarra2 <- matrix(apply(dados2,2,mean),ncol=1)
Xbarra2
dados3=dados[dados$Species=="virginica",1:4]
Xbarra3 <- matrix(apply(dados3,2,mean),ncol=1)
Xbarra3
cbind(Xbarra1,Xbarra2,Xbarra3)
pairs(dados1, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
pairs(dados2, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
pairs(dados3, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
Analise=manova(cbind(Sepal.Length,Sepal.Width,Petal.Length,Petal.Width)~Species,data=dados)
summary(Analise)
summary(Analise,test="Wilks")
summary(Analise,test="Hotelling-Lawley")
summary(Analise,test="Roy")
MBoxtest
?MBoxtest
??MBoxtest
cov.Mtest=function(x,ina,a=0.05) {
## x is the data set
## ina is a numeric vector indicating the groups of the data set
## a is the significance level, set to 0.05 by default
x=as.matrix(x)
p=ncol(x) ## dimension of the data set
n=nrow(x) ## total sample size
k=max(ina) ## number of groups
nu=rep(0,k) ## the sample size of each group will be stored here later
pame=rep(0,k) ## the determinant of each covariance will be stored here
## the next "for" function calculates the covariance matrix of each group
nu=as.vector(table(ina))
mat=mat1=array(dim=c(p,p,k))
11
for (i in 1:k) {
mat[,,i]=cov(x[ina==i,])
pame[i]=det(mat[,,i]) ## the detemirnant of each covariance matrix
mat1[,,i]=(nu[i]-1)*cov(x[ina==i,]) }
## the next 2 lines calculate the pooled covariance matrix
Sp=apply(mat1,1:2,sum)
Sp=Sp/(n-k)
for (i in 1:k)
pamela=det(Sp) ## determinant of the pooled covariance matrix
test1=sum((nu-1)*log(pamela/pame))
gama1=(2*(p^2)+3*p-1)/(6*(p+1)*(k-1))
gama2=(sum(1/(nu-1))-1/(n-k))
gama=1-gama1*gama2
test=gama*test1 ## this is the M (test statistic)
df=0.5*p*(p+1)*(k-1) ## degrees of freedom of the chi-square distribution
pvalue=1-pchisq(test,df) ## p-value of the test statistic
crit=qchisq(1-a,df) ## critical value of the chi-square distribution
list(M.test=test,degrees=df,critical=crit,p.value=pvalue) }
names(iris)
cov.Mtest(iris,iris$Species)
dados=read.csv("avaliacoes_genero.csv")
names(dados)
#Sexo Feminino
# MÉdia amostral
dadosF=dados[dados$genero==0,1:7]
Xbarra0 <- matrix(apply(dadosF,2,mean),ncol=1)
Xbarra0
n0 <- nrow(dadosF)
n0
p0 <- ncol(dadosF)
p0
# Matriz de variancias e covariancias amostrais
S0 <- var(dadosF)
S0
# Matriz de correlacoes amostrais
R0=cor(dados)
R0
#Sexo Masculino
# MÉdia amostral
dadosM=dados[dados$genero==1,1:7]
Xbarra1 <- matrix(apply(dadosM,2,mean),ncol=1)
Xbarra1
n1 <- nrow(dadosM)
n1
p1 <- ncol(dadosM)
p1
# Matriz de variancias e covariancias amostrais
S1 <- var(dadosM)
S1
# Matriz de correlacoes amostrais
R1=cor(dadosM)
R1
#vetores de mÃ©dias
cbind(Xbarra0,Xbarra1)
# ----------------- Graficos de dispersao multivariados -----------------
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(dadosF, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
pairs(dadosM, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
# ----------------- Verificando normalidade multivariada -----------------
# ----------------- Graficamente
# Distancias dj
par(mfrow=c(1,2))
d<-rep(0,n0)
for (i in 1: n0)
d[i] <- t(t(dadosF[i,]) - Xbarra0) %*% solve(S0) %*% (t(dadosF[i,]) - Xbarra0)
qqplot(d, qchisq(ppoints(n0), p0), pch=16, main="Grafico de quantis", xlab="quantis amostrais", ylab="quantis teoricos" )  # ExercÃcio: ?ppoints e proponha uma alternativa
abline(0,1)
d<-rep(0,n1)
for (i in 1: n1)
d[i] <- t(t(dadosM[i,]) - Xbarra1) %*% solve(S1) %*% (t(dadosM[i,]) - Xbarra1)
qqplot(d, qchisq(ppoints(n1), p1), pch=16, main="Grafico de quantis", xlab="quantis amostrais", ylab="quantis teoricos" )  # ExercÃcio: ?ppoints e proponha uma alternativa
abline(0,1)
par(mfrow=c(1,1))
# ----------------- Teste de Shapiro Wilk
library(mvShapiroTest)
mvShapiro.Test(as.matrix(dadosF))
mvShapiro.Test(as.matrix(dadosM))
#Vamos inicialmente fazer o teste ignorando o resultado do teste de normalidade, ok??
#So para treinarmos o teste.
# ----------------- Teste para a media -----------------
p=p0
Sp=((n0-1)*S0+(n1-1)*S1)/(n0+n1-2)
T2 = (1/n0+1/n1)^{-1} * t(Xbarra0-Xbarra1) %*% solve(Sp) %*% (Xbarra0-Xbarra1)
Fcal=(n0+n1-p-1)/((n0+n1-2)*p)*T2
Fcal
#Qual a sua decisao?
#Qual o p-valor do teste?
#Utilizando a funcao existe no R
install.packages("Hotelling")
require(Hotelling)
analise=hotelling.stat(dadosF,dadosM)
analise
teste=hotelling.test(dadosF,dadosM)
teste
ICsim=function(dados1,dados2,alfa,i){
n1 = nrow(dados1)
S1 = cov(dados1)
n2 = nrow(dados2)
S2 = cov(dados2)
p = ncol(dados1)
Xbarra1 <- matrix(apply(dados1,2,mean),ncol=1)
Xbarra2 <- matrix(apply(dados2,2,mean),ncol=1)
Sp=((n1-1)*S1+(n2-1)*S2)/(n1+n2-2)
t.tab=qt(alfa/(2*p),df=(n1+n2-2),lower.tail=FALSE)
ampl=t.tab*sqrt((1/n1+1/n2)*Sp[i,i])
linf=(Xbarra1[i]-Xbarra2[i])-ampl
lsup=(Xbarra1[i]-Xbarra2[i])+ampl
med1=paste("m",i,1,sep="")
med2=paste("m",i,2,sep="")
cat("IC(",med1,"-",med2,")","=",linf,";",lsup)
}
ICsim(dadosF,dadosM,0.05,1)
ICsim(dadosF,dadosM,0.05,2)
ICsim(dadosF,dadosM,0.05,3)
ICsim(dadosF,dadosM,0.05,4)
ICsim(dadosF,dadosM,0.05,5)
ICsim(dadosF,dadosM,0.05,6)
ICsim(dadosF,dadosM,0.05,7)
#----------------- MANOVA
cov.Mtest=function(x,ina,a=0.05) {
## x is the data set
## ina is a numeric vector indicating the groups of the data set
## a is the significance level, set to 0.05 by default
x=as.matrix(x)
p=ncol(x) ## dimension of the data set
n=nrow(x) ## total sample size
k=max(ina) ## number of groups
nu=rep(0,k) ## the sample size of each group will be stored here later
pame=rep(0,k) ## the determinant of each covariance will be stored here
## the next "for" function calculates the covariance matrix of each group
nu=as.vector(table(ina))
mat=mat1=array(dim=c(p,p,k))
11
for (i in 1:k) {
mat[,,i]=cov(x[ina==i,])
pame[i]=det(mat[,,i]) ## the detemirnant of each covariance matrix
mat1[,,i]=(nu[i]-1)*cov(x[ina==i,]) }
## the next 2 lines calculate the pooled covariance matrix
Sp=apply(mat1,1:2,sum)
Sp=Sp/(n-k)
for (i in 1:k)
pamela=det(Sp) ## determinant of the pooled covariance matrix
test1=sum((nu-1)*log(pamela/pame))
gama1=(2*(p^2)+3*p-1)/(6*(p+1)*(k-1))
gama2=(sum(1/(nu-1))-1/(n-k))
gama=1-gama1*gama2
test=gama*test1 ## this is the M (test statistic)
df=0.5*p*(p+1)*(k-1) ## degrees of freedom of the chi-square distribution
pvalue=1-pchisq(test,df) ## p-value of the test statistic
crit=qchisq(1-a,df) ## critical value of the chi-square distribution
list(M.test=test,degrees=df,critical=crit,p.value=pvalue) }
names(dados)
cov.Mtest(dados,dados$genero,a=0.05)
cov.Mtest(dados,as.factor(dados$genero),a=0.05)
vetor=matrix(dados$genero, ncol=1)
vetor
names(dados)
cov.Mtest(dados[,1:7],vetor,a=0.05)
install.package(biotools)
installs.package(biotools)
install.packages("biotools")
library(biotools)
names(dados)
boxM(dados[, -8], iris[, 8])
boxM(dados[, -8], dados[, 8])
boxM
cov.Mtest(dados[, -8], dados[, 8],a=0.05)
xbar1<-matrix(c(204.4,556.6))
xbar2<-matrix(c(130,355.0))
S1 <- matrix(c(13825.3,23823.4,23823.4,73107.4), 2,2, byrow=T)
S2 <- matrix(c(8632.0,19616.7, 19616.7,55964.5), 2,2, byrow=T)
p<-2
n1<-45
n2<-55
round(S <- S1/n1 + S2/n2,2)
(xbarp <- xbar1-xbar2)
fd<- function(mu) { t(xbarp-matrix(mu)) %*% solve(S) %*% (xbarp-matrix(mu)) }
fd(c(0,0))
(C<-sqrt(qchisq(0.95,df=p)))
C^2
# combinaÃ§Ã£o mais critica para rejeitar H_0 Ã©
round(solve(S) %*% xbarp,3)
pdf("e65.pdf")
require(ellipse)
par(mai=rep(1,4))
mu<-xbarp
L<-200
plot(1:10, xlim=mu[1]+c(-L,L), ylim=mu[2]+c(-L,L), type="n")
polygon(ellipse(S,centre=xbarp, t=C), col="blue", density=30, angle=130)
dev.off()
# intervalos de confianca simultaneous sÃ£o bem parecidos com o caso de Example 6.4
round(x<-xbarp[1]+c(-1,1)*C*sqrt(S[1,1]),1)
round(y<-xbarp[2]+c(-1,1)*C*sqrt(S[2,2]), 1)
#Ememplo 5
#Example 6.6
#Sigmas nao necessariamente mesmas
# a distribuiÃ§Ã£o precisa ser normal multivariada
# SeÃ§Ã£o 13.3.1 (b) p. 364 do livro de M
xbar1<-matrix(c(204.4,556.6))
xbar2<-matrix(c(130,355.0))
S1 <- matrix(c(13825.3,23823.4,23823.4,73107.4), 2,2, byrow=T)
S2 <- matrix(c(8632.0,19616.7, 19616.7,55964.5), 2,2, byrow=T)
p<-2
n1<-45
n2<-55
round(S <- S1/n1 + S2/n2,2)
(xbarp <- xbar1-xbar2)
fd<- function(mu) { t(xbarp-matrix(mu)) %*% solve(S) %*% (xbarp-matrix(mu)) }
fd(c(0,0))
round(M1<-S1%*%solve(S)/n1,3)
round(M2<-S2%*%solve(S)/n2,3)
tr<-function(A) {sum(diag(A))}
nu<-(p+p^2)/((tr(M1%*%M1)+tr(M1)^2)/n1+ (tr(M2%*%M2)+tr(M2)^2)/n2)
(C<-sqrt(qf(0.95,df1=p, df2=nu-p+1)*p*nu/(nu-p+1)))
C^2
# combinaÃ§Ã£o mais critica para rejeitar H_0 Ã©
round(solve(S) %*% xbarp,3)
pdf("e67.pdf")
require(ellipse)
tab <- data.frame(y=c(9,6,9,0,2,3,1,2), x=c(rep(1,3), rep(2,2), rep(3,3)))
g<-3
xbars<-tapply(tab[,1], tab[,2], mean)
xbar<-mean(tab[,1])
nn<-tapply(tab[,1],tab[,2], length)
p<-1
n<-0
for (i in 1:g) {(n<- n + nn[i])}
S<-tapply(tab[,1], tab[,2], var)
W<-0
for (i in 1:g) {(W<- W + (nn[i]-1)*S[i])}
B<-0
for (i in 1:g) B<- B+ nn[i]*(xbars[i]-xbar)^2
(st<-(B/(g-1))/(W/(n-g)))
qf(1-0.01,df1=g-1,df2=n-g)
1-pf(st,df1=g-1,df2=n-g)
# jeito mais automatisado
with(tab,summary(aov(y~as.factor(x))))
data(iris)
name(iris)
names(iris)
dados=read.csv("avaliacoes_genero.csv")
names(dados)
vetor=matrix(dados$genero, ncol=1)
#Sexo Feminino
# MÉdia amostral
dadosF=dados[dados$genero==0,1:7]
Xbarra0 <- matrix(apply(dadosF,2,mean),ncol=1)
Xbarra0
n0 <- nrow(dadosF)
n0
p0 <- ncol(dadosF)
p0
# Matriz de variancias e covariancias amostrais
S0 <- var(dadosF)
S0
# Matriz de correlacoes amostrais
R0=cor(dados)
R0
#Sexo Masculino
# MÉdia amostral
dadosM=dados[dados$genero==1,1:7]
Xbarra1 <- matrix(apply(dadosM,2,mean),ncol=1)
Xbarra1
n1 <- nrow(dadosM)
n1
p1 <- ncol(dadosM)
p1
# Matriz de variancias e covariancias amostrais
S1 <- var(dadosM)
S1
# Matriz de correlacoes amostrais
R1=cor(dadosM)
R1
#vetores de mÃ©dias
cbind(Xbarra0,Xbarra1)
# ----------------- Graficos de dispersao multivariados -----------------
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(dadosF, upper.panel= panel.cor, main="Dispersao e correlacao", pch=16)
d<-rep(0,n0)
for (i in 1: n0)
d[i] <- t(t(dadosF[i,]) - Xbarra0) %*% solve(S0) %*% (t(dadosF[i,]) - Xbarra0)
qqplot(d, qchisq(ppoints(n0), p0), pch=16, main="Grafico de quantis", xlab="quantis amostrais", ylab="quantis teoricos" )  # ExercÃcio: ?ppoints e proponha uma alternativa
abline(0,1)
d<-rep(0,n1)
for (i in 1: n1)
d[i] <- t(t(dadosM[i,]) - Xbarra1) %*% solve(S1) %*% (t(dadosM[i,]) - Xbarra1)
qqplot(d, qchisq(ppoints(n1), p1), pch=16, main="Grafico de quantis", xlab="quantis amostrais", ylab="quantis teoricos" )  # ExercÃcio: ?ppoints e proponha uma alternativa
abline(0,1)
library(mvShapiroTest)
mvShapiro.Test(as.matrix(dadosF))
mvShapiro.Test(as.matrix(dadosM))
n0
Sp=((n0-1)*S0+(n1-1)*S1)/(n0+n1-2)
T2 = (1/n0+1/n1)^{-1} * t(Xbarra0-Xbarra1) %*% solve(Sp) %*% (Xbarra0-Xbarra1)
Fcal=(n0+n1-p-1)/((n0+n1-2)*p)*T2
Fcal
qchisq(0.95,2)
T2
install.packages("Hotelling")
require(Hotelling)
analise=hotelling.stat(dadosF,dadosM)
#O que significam cada uma das quantidades?
analise
qchisq(0.95,7)
teste=hotelling.test(dadosF,dadosM)
teste
dim(a)
a=dados[, -8]
dim(a)
boxM(dados[, -8], dados[, 8])
boxM <-
function(data, grouping)
{
if (!inherits(data, c("data.frame", "matrix")))
stop("'data' must be a numeric data.frame or matrix!")
if (length(grouping) != nrow(data))
stop("incompatible dimensions!")
dname <- deparse(substitute(data))
data <- as.matrix(data)
grouping <- as.factor(as.character(grouping))
p <- ncol(data)
nlev <- nlevels(grouping)
lev <- levels(grouping)
dfs <- tapply(grouping, grouping, length) - 1
if (any(dfs < p))
warning("there are one or more levels with less observations than variables!")
mats <- aux <- list()
for(i in 1:nlev) {
mats[[i]] <- cov(data[grouping == lev[i], ])
aux[[i]] <- mats[[i]] * dfs[i]
}
names(mats) <- lev
pooled <- Reduce("+", aux) / sum(dfs)
logdet <- log(unlist(lapply(mats, det)))
minus2logM <- sum(dfs) * log(det(pooled)) - sum(logdet * dfs)
sum1 <- sum(1 / dfs)
Co <- (((2 * p^2) + (3 * p) - 1) / (6 * (p + 1) *
(nlev - 1))) * (sum1 - (1 / sum(dfs)))
X2 <- minus2logM * (1 - Co)
dfchi <- (choose(p, 2) + p) * (nlev - 1)
pval <- pchisq(X2, dfchi, lower.tail = FALSE)
out <- structure(
list(statistic = c("Chi-Sq (approx.)" = X2),
parameter = c(df = dfchi),
p.value = pval,
cov = mats, pooled = pooled, logDet = logdet,
data.name = dname,
method = " Box's M-test for Homogeneity of Covariance Matrices"
),
class = c("htest", "boxM")
)
return(out)
}
boxM(dados[, -8], dados[, 8])
install.packages("Hotelling")
pnorm(0,4)
dnorm(0,4)
dnorm(0.4)
?dnorm
pnorm(0.4)
qnorm(0.4)
install.packages("mvtnorm")
library(mvtnorm)
install.packages("biotools")
install.packages("biotools")
install.packages("rpanel")
install.packages("biotools")
citation()
install.packages("biotools")
R$Version
R$version
install.packages("biotools")
install.packages(c("actuar", "aplpack", "arm", "assertive.code", "assertive.data.uk", "assertive.data.us", "assertive.models", "BDgraph", "callr", "car", "carData", "caTools", "cli", "cluster", "coda", "corrgram", "curl", "data.table", "deldir", "dendextend", "digest", "doBy", "dotCall64", "e1071", "evaluate", "expint", "expm", "extraDistr", "fda", "foreign", "Formula", "fpc", "ggplot2", "glasso", "glue", "gmodels", "gtools", "highr", "hms", "htmlTable", "htmlwidgets", "httpuv", "igraph", "iterators", "kernlab", "lavaan", "LearnBayes", "lme4", "lmtest", "maps", "maptools", "MASS", "Matrix", "mclust", "mime", "modeltools", "munsell", "MVar.pt", "mvtnorm", "network", "nlme", "nloptr", "paran", "pillar", "pkgconfig", "ps", "psych", "purrr", "PythonInR", "qgraph", "quantreg", "R6", "RcppArmadillo", "readstata13", "reprex", "reticulate", "rjson", "rlang", "robustbase", "rpart.plot", "rpf", "rstudioapi", "sandwich", "scales", "seriation", "shiny", "sourcetools", "sp", "spam", "SpatialEpi", "spData", "spdep", "startupmsg", "statnet.common", "survey", "survival", "TH.data", "tidyselect", "tinytex", "trimcluster", "TSP", "TTR", "utf8", "viridis", "xfun", "XML", "xtable", "xts", "yaml", "zoo"))
